## Lines like this one that begin with '##' are Mako comments.
##
## This is the master template.  You probably don't want to use this directly.
## Instead, you should probably inherit from it by using
## <%inherit file="./master.tmpl"/> in another template.  You can then override
## whatever you want by using '<%def>' sections.
##
## Here is the Mako website and docs: http://www.makotemplates.org/
##
## Mini Mako Cheat Sheet:
##     ### Some Common Mako Syntax Structures: ###
##     <%inherit file="..." />  --  Means that this template inherits from another template.
##     <%! ... %>  --  This is a "global" code block.  It gets run once when the template is loaded.
##     <% ... %>   --  This is a "normal" code block.  It gets run wherever it appears in the
##                     template.  So for example if it is in a loop, it will get run multiple times.
##     ${...}  --  Executes the enclosed expression and places the string output into the template.
##     %if ...: ... %endif
##     %for ...: ... %endfor
##     <%def name="ABC()">...</%def>  --  Defines a template function.  These can be overridden by
##                                        inheriting templates.  You usually evaluate these template
##                                        functions by using an ${self.ABC()} evaluation.
##
##     ### Template Filenames: ###
##     globals()['_template_filename']  --  The path of *this* template, even if it is being
##                                          called from an inheriting template.
##     self.uri  --  The path of the template that is actually being rendered.  It might be
##                   inheriting from this one.
##
##     ### Inheritance stuff: ###
##     self.body()  --  Refers to the 'body()' of the "end"  template in the inheritance chain.
##     next.body()  --  Refers to the 'body()' of the "next" template in the inheritance chain.
##
##     ### Using one template from another ###
##     <%include file="db.json.tmpl" />
##     ${context.lookup.get_template('db.json.tmpl').render_unicode().strip()}
##
##
##
##
## This DOCTYPE specifies that our page is HTML 5:
<!DOCTYPE html>
<html lang=en>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="shortcut icon" type="image/vnd.microsoft.icon" href="/favicon.ico">
    <title>${self.TITLE()}</title>
    <link rel="stylesheet" type="text/css" href="/static/lib/yui-3.12.0/reset_base_fonts-min.css">
    <link rel="stylesheet" type="text/css" href="${self.URL('/static/css/master.css')}">
    ${self.PAGE_CSS()}
    <script type="text/javascript" src="/static/lib/jquery-1.10.2/jquery.js"></script>
    <script type="text/javascript" src="/static/lib/underscore-1.5.2/underscore.js"></script>
    <script type="text/javascript">
      ## Prevent the use of '$' because it is cryptic,
      ## and is easily confused with Mako template stuff.
      ## Use 'jQuery' instead.
      jQuery.noConflict();
    </script>
    %if self.debugPage():
      <script type="text/javascript" src="/static/lib/firebug-lite-1.3.2/build/firebug-lite.js">
        // You can use Ctrl+F12 or F12 to activate Firebug-lite.
        {
          startOpened:true,         // Make it obvious that we are in debug mode.
          showIconWhenHidden:false  // Don't screw with the elements on the page.
        }
      </script>
    %endif
    <script type="text/javascript" src="${self.URL('/static/js/master.js')}"></script>
    ${self.PAGE_JS()}
  </head>
  <body class="roundedTop roundedBottom">
    ${self.BODY()}
  </body>
</html>

## These are Mako '<%def>' sections.  They override values in the resulting templates.
## You can override these <%def>'s in templates that inherit from this one.
<%def name='TITLE()'>Q Process Queue</%def>
<%def name='PAGE_CSS()'></%def>
<%def name='PAGE_JS()'></%def>
<%def name='BODY()'></%def>
<%def name='debugPage()'><% return False %></%def>


## Some extremely basic utilities.  Feel free to improve them as needed:
<%def name="URL(path, timestamp='auto')"><%
    # This function makes it easy to serve static files that are aggressively cached
    # on the client side, without making life difficult on the server side.  Whenever
    # an update to the file occurs, the timestamp will also update, resulting in a
    # new URL, which the client will fetch.

    assert path[0] == '/'
    mount_point = ''  # <-------- Override this if necessary.
    url = mount_point + path

    if timestamp == 'auto':
        src_dir = os.path.dirname(globals()['_template_filename'])
        fs_path = os.path.join(src_dir, path[1:])
        if not os.path.exists(fs_path):
            # Could not find the referenced file.  Is it a template?
            fs_path = os.path.join(src_dir, path[1:]+'.tmpl')
        if not os.path.exists(fs_path): raise ValueError('Unable to find fs_path for url: %r'%(path,))
        timestamp = os.path.getmtime(fs_path)
    if timestamp != None:
        if '?' not in url: url += '?'
        else: url += '&'
        url += 'timestamp=%s'%(timestamp,)

    return url
%></%def>
<%! import os %>
