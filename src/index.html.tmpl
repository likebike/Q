<%inherit file="_master.html.tmpl" />

<h1>What is Q?</h1>
<p>Q is a process queue specifically designed for running CGI and PHP at <a href="http://webfaction.com/">WebFaction</a>.</p>
<p>Normally, CGI and PHP at WebFaction are great, except for one problem: there is no limit to the number of CGI workers that get created.  So during a traffic spike, it is easy to exceed your account's RAM limits, resulting in all your processes getting killed.  FastCGI is often recommended as an alternative because it allows you to specify the number of worker processes that should be created, but many sites are not totally compatible with FastCGI, and they produce mysterious "500" errors that can cause the site to "hang".</p>
<p>Q fixes this problem by only allowing a defined number of CGI workers to run at any time.  Any additional requests that come in get queued and execute in FIFO order.  This enables you to easily control the maximum amount of RAM you use during traffic spikes.  This solution makes CGI a viable option again.</p>
<p>Q is developed by <a href="mailto:csebastian3@gmail.com">Christopher Sebastian</a> and <a href="mailto:rsanden@gmail.com">Ryan Sanden</a> (both of whom work at WebFaction).</p>
<h1>Installation</h1>
<p>Installation consists of two pieces: downloading a Q binary, and then using the binary from your website's .htaccess file.</p>
<ol>
  <li>
    <p>Download an appropriate binary from the table below and place it at <span class=mono>~/webapps/APP/</span> (where <span class=mono>APP</span> is your app name):</p>
    <h3>If your account is on a CentOS 6 server (Web300 or higher):</h3>
    ${self.DL_TABLE('CentOS 6', '/bin/centos6')}
    <h3>If your account is on a CentOS 5 server (Web299 or lower):</h3>
    ${self.DL_TABLE('CentOS 5', '/bin/centos5')}
  </li>


  <li>
    <p>Edit your <span class=mono>~/webapps/APP/.htaccess</span> file and add these lines to the top of the file (replace <span class=mono>php54_normal.cgi</span> with the filename you downloaded):</p>
<pre class=code>
Action php-q /php54_normal.cgi
AddHandler php-q .php
</pre>
  </li>
</ol>
<h1>Frequently Asked Questions</h1>
<p>If you have a question that is not addressed here, please send it to <a href="mailto:csebastian3@gmail.com">Christopher</a>.</p>
<ul>
  <li>Which PHP version am I running?</li>
  <li>What is the difference between the "normal" and "large" binaries?</li>
  <li>I am using Q, but I forgot which one I downloaded.  How can I see which Q settings I am currently using?</li>
</ul>
<h1>How Q Works</h1>
<p>Note that the majority of Q's internal options are hard-coded when you select a PHP binary from the table above, so you actually never need to specify these options unless you are in an advanced situation.</p>
<p>A detailed description of Q's operation is coming soon, but for now, <a href="/bin/q.tar.gz">here is a link to the source code</a>, and below is the normal Q help text:</p>
<pre class=code>

Q Version 2013-08-28e  --  a FIFO worker queue, capable of running multiple workers at once.

Typical usage:  COMMAND=/usr/bin/rsync  LOCKFILE='~/.tmp/backups.lock' ./q [args...]

The args get passed directly to COMMAND.

Environment Variables:

    COMMAND=path -- Required.  The path to the target executable.  Should usually be an absolute path.
    LOCKFILE=path -- Required.  The path to the lock file.  More info below.
    CONCURRENCY=num -- Controls the number of workers to run at once.  Default is 1.
    MAX_Q=num -- Controls the maximum queue size (# waiting to run).  Default is -1 (unlimited).
    AUTO_CREATE_DIRS -- Set to 0 to prevent the lockfile parent directories from being auto-created.
    VERBOSE -- Set to 1 to display verbose information.
    HELP -- Set to 1 to display this help message and then exit.

You can use the tilde (~) and environment variables ($VAR) in the LOCKFILE.
This enables you to achieve some interesting queuing structures:

    LOCKFILE=example.lock                   # A relative path can queue jobs based on $PWD.
    LOCKFILE=/tmp/shared.lock               # A system-wide queue.  (You would need to chmod 666 it.)
    LOCKFILE='~/myjobs.lock'                # Use a per-account queue.
    LOCKFILE='~/.tmp/cgi_$SERVER_NAME.lock' # Assuming this is for CGI processes, use a per-domain queue.

</pre>

<%def name="DL_TABLE(title, basePath)">
    <table>
      <tr><th class=cornerLabel>${title}</td><th class=topLabel>PHP 5.2</th><th class=topLabel>PHP 5.3</th><th class=topLabel>PHP 5.4</th><th class=topLabel>CGI (Advanced)</th></tr>
      <tr><th class=leftLabel>Normal Account<br><span class=labelDesc>(If you have a 256MB/512MB plan)</span></td><td><a href="${basePath}/php52_normal.cgi">php52_normal.cgi</a></td><td><a href="${basePath}/php53_normal.cgi">php53_normal.cgi</a></td><td><a href="${basePath}/php54_normal.cgi">php54_normal.cgi</a></td><td rowspan=2><a href="${basePath}/q">q</a></td></tr>
      <tr><th class=leftLabel>Large Account<br><span class=labelDesc>(If you have a 1GB/2GB/4GB plan)</span></td><td><a href="${basePath}/php52_large.cgi">php52_large.cgi</a></td><td><a href="${basePath}/php53_large.cgi">php53_large.cgi</a></td><td><a href="${basePath}/php54_large.cgi">php54_large.cgi</a></td></tr>
    </table>
</%def>
